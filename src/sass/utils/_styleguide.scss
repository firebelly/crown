/* _styleguide.scss */
@use "system" as *;
@use "mixins" as *;
@use "helpers" as *;
@use "config" as *;
@use "sass:math";
@use "sass:string";
@use "sass:list";

/* ---------------------------------------------------------------------
 _styleguide contains project-specific style patterns
------------------------------------------------------------------------ */
// svg path, relative to compiled stylesheet
$svg-path: '../svgs/';
$img-path: '../images/';

/* ---------------------------------------------------------------------
 Type Map

 1. ems based on 1rem-sized parent
 2. relative line-heights
 3. add as many type-related declarations as needed

 Example:
 
 "h1-lg": (
	font: 11em/109% $font-primary,
	letter-spacing: 0.01em
 ),
 "h2-lg": (
	font: 8em/90% $font-secondary,
	letter-spacing: 0.02em,
	text-transform: uppercase
),
------------------------------------------------------------------------ */
$text-map: (

	// Crown
	/////////////////////
	// Active
	"h1": (
		"sm": (
			font: 2em/109% $font-tertiary,
			font-weight: 200,
			letter-spacing: 0.01em,
		),
		"lg": (
			font-size: 2em
		),
	),
	"h2": (
		"sm": (
			font: 2em/136% $font-tertiary,
			font-weight: 600,
			letter-spacing: 0.025em
		),
		"lg": (
			font-size: 2em
		),
	),
	"h3": (
		"sm": (
			font: 1.6em/136% $font-tertiary,
			font-weight: 600,
			letter-spacing: 0.025em
		),
		"lg": (
			font-size: 1.8em
		),
	),
	"h4": (
		"sm": (
			font: 1.4em/136% $font-tertiary,
			font-weight: 600,
			letter-spacing: 0.025em
		),
		"lg": (
			font-size: 1.6em
		),
	),
	"h5": (
		"sm": (
			font: 1.4em/136% $font-tertiary,
			font-weight: 600,
			letter-spacing: 0.025em
		),
		"lg": (
			font-size: 1.4em
		),
	),
	"legend-std": (
		"sm": (
			font: 1.6em/136% $font-tertiary,
			font-weight: 400,
			letter-spacing: 0.025em
		),
		"lg": (
			font-size: 1.6em
		),
	),
	"p1-std": (
		"sm": (
			font: 1.4em/136% $font-secondary,
			font-weight: 300,
			letter-spacing: 0.025em
		),
		"lg": (
			font-size: 1.6em
		),
	),
	"p1-detail": (
		"sm": (
			font: 1em/136% $font-secondary,
			font-weight: 300,
			letter-spacing: 0.025em
		),
		"lg": (
			font-size: 1.1em
		),
	),
	"crumb": (
		"sm": (
			font: 1.4em/136% $font-tertiary,
			font-weight: 300,
			letter-spacing: 0.025em
		),
		"lg": (
			font-size: 1em
		),
	),
	"p1-sm": (
		"sm": (
			font: 1.2em/156% $font-secondary,
		),
		"lg": (
			font-size: 1.2em
		),
	),
	"input-std": (
		"sm": (
			font: 1.6em/156% $font-tertiary,
			letter-spacing: 0.015em
		),
		"lg": (
			font-size: 1.6em
		),
	),
	"input-sm": (
		"sm": (
			font: 1.4em/143% $font-tertiary,
			letter-spacing: 0.015em
		),
		"lg": (
			font-size: 1.4em
		),
	),
	
);

/* ---------------------------------------------------------------------
 Type Map

 Example Usage:
 getType('h2-lg');
------------------------------------------------------------------------ */
@mixin getType($name) {
	$map: map-get($text-map, $name);

	$sm-attrs: map-get($map,'sm');
	$lg-attrs: map-get($map,'lg');

	// Explode the attr-props
	@each $attr, $prop in $sm-attrs {
		#{$attr}: $prop;

		@include breakpoint(lg) {
			@each $attr, $prop in $lg-attrs {
				#{$attr}: $prop;
			}
		}
	}
}

/* ---------------------------------------------------------------------
 Theme
------------------------------------------------------------------------ */
$color-primary: getColor('black');
$color-secondary: getColor('white');

/* ---------------------------------------------------------------------
  Globals Vars
------------------------------------------------------------------------ */
$palette-transition: background .3s, color .3s;
$fill-transition: fill .3s;
$fade-transition: opacity .5s;
$slide-transition: transform .5s;

/* ---------------------------------------------------------------------
  Buttons
------------------------------------------------------------------------ */

@mixin globalButton($colors...) {
	$color-count: length($colors);
	
	$color-primary: if($color-count >= 1,nth($colors,1),$color-primary);
	$color-secondary: if($color-count >= 2,nth($colors,2),$color-secondary);

	@include resetButton;
	border: 1px solid $color-primary;
	border-radius: 8px;
	padding: 0.6em 0.5em 0.8em;
	transition: $palette-transition;
	background: $color-secondary;
	color: $color-primary;
	font-size: 1rem;
	display: flex;
	align-items: end;

	&-label {
		@include getType('input-sm');
	}

	svg {
		height: 16px;
		width: 16px;
		margin-left: 0.5em;
		fill: $color-primary;
		transition: $fill-transition;
	}

	@media (hover: hover) {
		&:hover {
			cursor: pointer;
			background: $color-primary;
			color: $color-secondary;

			svg {
				fill: $color-secondary;
			}
		}
	}
}

@mixin globalButtonPair($selector) {
	display: flex;
	flex-flow: row nowrap;
	justify-content: end;

	@at-root {
		#{$selector}-action {
			@include globalButton();

			&:nth-of-type(1) {
				margin-right: 1em;
			}

			&--alt {
				border: none;
				border-radius: 0;
				text-decoration: underline;
				text-underline-offset: 5px;
			}

		}
	}
}


@mixin globalTrigger() {
	@include resetButton;
	@include getType('input-std');
	padding: 1em;
	text-decoration: underline;
	text-underline-offset: 6px;
	transition: $palette-transition;

	@media (hover: hover) {
		&:hover  {
			cursor: pointer;
			background: getColor('brick');
			color: getColor('white');
			transition: $palette-transition;

			svg {
				fill: getColor('white');
				transition: $fill-transition;
			}

		}
	}

	svg {
		fill: getColor('black');
		margin-left: 0.3em;
		width: 15px;
		height: 15px;
		transition: $fill-transition;
	}
	
}

/* ---------------------------------------------------------------------
  Links
------------------------------------------------------------------------ */
@mixin actionAnchor() {
    &:link,
    &:visited,
    &:hover,
    &:active {
        color: getColor('brick');
        text-decoration-thickness: 1px;
        text-underline-offset: 5px;
    }
}

@mixin actionLabel() {
    color: getColor('brick');
    text-decoration: underline;
    text-decoration-thickness: 1px;
    text-decoration-color: getColor('brick');
    text-underline-offset: 5px;
}

@mixin actionHover() {   
    background: getColor('brick');
    color: getColor('white');
    outline: 6px solid getColor('brick');

    svg {
        fill: getColor('white');
    }    
}

@mixin simpleLink() {
    &:link,
    &:visited,
    &:hover,
    &:active {
        text-decoration: none;
    }
}