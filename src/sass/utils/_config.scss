/* _config.scss */
@use "sass:math";
/* ---------------------------------------------------------------------
 _config contains project-specific settings
------------------------------------------------------------------------ */

/* ---------------------------------------------------------------------
 Breakpoints Map
------------------------------------------------------------------------ */
$breakpoints: (
	"xxs": "0",
	"xs": "375px",
	"sm": "576px",
	"md": "768px", 
	"lg": "1024px",
	"xl": "1280px",
	"xxl": "1440px"
);

/* ---------------------------------------------------------------------
 Fonts
 font url is relative to our compiled stylesheet
------------------------------------------------------------------------ */
@mixin getFont($fontname, $dir: null, $filename, $style: null, $weight: 400) {

	@font-face {
		$downloadable-path: if($dir,'../fonts/#{$dir}/#{$filename}','../fonts/#{$filename}/#{$filename}');
		$local-path: '#{$filename}';

		font-display: swap;
		font-family: $fontname;
		font-style: $style;
		font-weight: $weight;
		src: local('#{$local-path}.woff2'), url('#{$downloadable-path}.woff2') format('woff2');
	}
}

// Define project fonts
$primary-name: 'The Future Mono';
$primary-file: 'the-future-mono-extralight';
$primary-serif: 'sans-serif'; 

$secondary-name: 'The Future Mono';
$secondary-file: 'the-future-mono-light';
$secondary-serif: 'sans-serif';

$tertiary-name: 'The Future';
$tertiary-file: 'the-future-regular';
$tertiary-serif: 'sans-serif';

$quaternary-name: 'The Future';
$quaternary-file: 'the-future-bold';
$quaternary-file-italic: 'the-future-bold-italic';
$quaternary-serif: 'sans-serif';

$quinary-name: 'The Future';
$quinary-file: 'the-future-light';
$quinary-file-italic: 'the-future-light-italic';
$quinary-serif: 'sans-serif';

$future-dir: 'the-future';

// The Future Mono Extralight
@include getFont($primary-name, $future-dir, $primary-file, normal, 200);
// The Future Mono Light
@include getFont($secondary-name, $future-dir, $secondary-file, normal, 300);
// The Future Regular
@include getFont($tertiary-name, $future-dir, $tertiary-file, normal, 400);
// The Future Bold
@include getFont($quaternary-name, $future-dir, $quaternary-file, normal, 700);
// The Future Bold Italic
@include getFont($quaternary-name, $future-dir, $quaternary-file-italic, italic, 700);
// The Future Light
@include getFont($quinary-name, $future-dir, $quinary-file, normal, 300);
// The Future Italic
@include getFont($quinary-name, $future-dir, $quinary-file-italic, italic, 300);

$font-primary: $primary-name, $primary-serif;
$font-secondary: $secondary-name, $secondary-serif;
$font-tertiary: $tertiary-name, $tertiary-serif;
$font-quaternary: $quaternary-name, $quaternary-serif;


/* ---------------------------------------------------------------------
 palettes() Map
 Maps global color families, assigning a "core" or default to each one;
 Hexidecimals per family should be defined in increments of 10.

 Example:

 'yellow': (
	core: #FBF8E9,
	10: #FFA319,
	20: #F7EDBA,
	30: #EC9213
  )
------------------------------------------------------------------------ */
$palettes: (

	'maroon': (
		core: #800000
	),
	'brick': (
		core: #A4343A,
		10: #B46A55,
		20: #643335
	),
	'greystone': (
		core: #D9D9D9,
		10: #A6A6A6,
		20: #737373
	),
	'goldenrod': (
		core: #EAAA00,
		10: #F3D03E,
		20: #CC8A00
	),
	'terracotta': (
		core: #DE7C00,
		10: #ECA154,
		20: #A9431E
	),
	'ivy': (
		core: #789D4A,
		10: #A9C47F,
		20: #13301C
	),
	'lake': (
		core: #007396,
		10: #3EB1C8,
		20: #002A3A
	),
	'white': (
		core: #FFFFFF
	),
	'black': (
		core: #000000
	)

);

/* ---------------------------------------------------------------------
 getColor()
 Retrieves color from palettes() map based on hue, and optional tone parameters

 // Props to https://www.ibm.com/design/language/resources for the conditional
 // which enforces the %10 convention within the palette map

 // Usage:
 // background: getColor('gray', 10); // #ecf0f4
 // background: getColor('gray');     // #5E788D
------------------------------------------------------------------------ */
@function getColor($color, $tone: 'core') {

	@if type-of($tone) == 'number' {

		@if $tone % 10 == $tone {
			$tone: $tone * 10;
		}

	}

	$color-family: map-get($palettes, $color);
	// Make sure color family exists; default to black
	$color-hex: if($color-family,map-get($color-family, $tone),#000);

	@return $color-hex;

}