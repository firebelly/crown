/* _savvy-search.scss */
@use "../utils/_utils" as *;
@use "sass:string";
@use "sass:math";

/* ---------------------------------------------------------------------
  Savvy Search Form
------------------------------------------------------------------------ */
@mixin savvySearch($selector,$default: true,$colors...) {

	#{$selector} {
		position: relative;
		z-index: 10;
		font-size: 1rem;

		&-wrap {
			position: relative;

			@include breakpoint(lg) {
				width: 550px;
			}
			
		}

        &-trigger {
			$transition: 0.3s background, 0.3s color;
			display: flex;
			align-items: center;
			width: 100%;
			padding: 1em 2em 1em 1em;
			transition: $transition;
            border: 1px solid transparent;

			// &:focus {
			// 	outline
			// }

			@include breakpoint(lg) {
				
			}
        }

		&-reset {
			@include resetButton();
			height: 20px;
			width: 20px; 
			padding: 0.2em;
			left: calc(100% - 3em);
			z-index: 1;
			position: absolute;
  			top: 50%;
  			transform: translateY(-50%);
		}

		&-output {
			border: 1px solid transparent;
			position: absolute;
			left: 0;
			top: calc(100% + 2px);
			z-index: 3;
		}
	

    }

    @if $default != false {
		@include savvySearch--default($selector,$colors...);
	}

}

/* -------------------------------------------------------------------------------
 Savvy Search: Default Presentation
---------------------------------------------------------------------------------- */
@mixin savvySearch--default($selector,$colors...) {
	$color-count: length($colors);
	// Define additional colors as needed
	// $color-primary: if($color-count >= 1,nth($colors,1),null);
	// $color-secondary: if($color-count >= 2,nth($colors,2),null);
	// $color-tertiary: if($color-count >= 3,nth($colors,3),null);

	#{$selector} {
       
		&-legend {
			@include getType('input-std');
		}

		&-trigger {
			color: $color-primary;
			border-color: $color-primary;
			@include getType('input-std');
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		}
	
		&-label {
			@include visuallyHide;
		}	

		&-reset {
			background: getColor('greystone');
			border-radius: 100%;
			fill: getColor('white');
			

			svg {
				display: block;
				width: 16px;
    			height: 16px;
				pointer-events: none;
			}

			&._is-inactive {
				@include totallyHide;
			}

			@media (hover: hover) {
				&:hover {
					cursor: pointer;
				}
			}

		}

		&-output {
		
			&._is-active {
				padding: 1em;
				border-color: $color-primary;
				background: $color-secondary;
			
			}

			&-li {
				@include getType('input-std');
				padding: 1em 0;

				@media (hover: hover) {
					&:hover {
						cursor: pointer;
					}
				}

			}
			
		}

    }

}